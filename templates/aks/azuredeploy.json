{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.0.1.0",
    "parameters": {
        "aksName": {
            "type": "string",
            "metadata": {
                "description": "The AKS cluster name."
            }
        },
        "aksKubernetesVersion": {
            "type": "string",
            "defaultValue": "1.18.8",
            "metadata": {
                "description": "The Kubernetes cluster version. https://docs.microsoft.com/en-us/azure/aks/supported-kubernetes-versions"
            }
        },
        "aksAgentPoolProfiles": {
            "type": "array",
            "metadata": {
                "description": "Specify an array of node pools"
            },
            "defaultValue": [
                {
                    "name": "default",
                    "nodeCount": 2,
                    "nodeVmSize": "Standard_B2s",
                    "subnetName": "aks",
                    "availabilityZones": [
                        "1",
                        "2",
                        "3"
                    ],
                    "osType": "Linux",
                    "enableAutoScaling": true,
                    "maxCount": 6,
                    "minCount": 2,
                    "mode": "System",
                    "nodeLabels": {},
                    "nodeTaints": []
                }
            ]
        },
        "aksUptimeSLA": {
            "type": "string",
            "metadata": {
                "description": "Enable or disable the finantial backed SLA for the Kubernetes API. https://docs.microsoft.com/en-us/azure/aks/uptime-sla"
            },
            "allowedValues": [
                "Free",
                "Paid"
            ],
            "defaultValue": "Free"
        },
        "aksPolicy": {
            "type": "bool",
            "metadata": {
                "description": "Enable the AKS Azure Policy add-on. https://docs.microsoft.com/en-us/azure/governance/policy/concepts/policy-for-kubernetes"
            },
            "defaultValue": false
        },
        "aksAADAdminGroups": {
            "type": "array",
            "metadata": {
                "description": "Azure AD object id's with cluster-admin role. https://docs.microsoft.com/en-us/azure/aks/manage-azure-rbac"
            },
            "defaultValue": []
        },
        "IPWhitelist": {
            "type": "array",
            "metadata": {
                "description": "IP address ranges enabled to access the kubernetes API. https://docs.microsoft.com/en-us/azure/aks/api-server-authorized-ip-ranges"
            },
            "defaultValue": []
        },
        "privateCluster": {
            "type": "bool",
            "metadata": {
                "description": "Enable AKS with Private Link. https://docs.microsoft.com/en-us/azure/aks/private-clusters"
            },
            "defaultValue": false
        },
        "networkProfile": {
            "type": "object",
            "metadata": {
                "description": "The AKS networking profile."
            },
            "defaultValue": {
                "loadBalancerSku": "standard",
                "outboundType": "loadBalancer",
                "networkPlugin": "azure",
                "networkPolicy": "calico",
                "serviceCidr": "10.254.0.0/16",
                "dnsServiceIp": "10.254.0.4",
                "dockerBridgeCidr": "172.17.0.1/16"
            }
        },
        "vnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            }
        },
        "vnetResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Name of the resource Group containing the target vNet."
            }
        }
    },
    "variables": {
        "apiVersion": {
            "aks": "2020-04-01",
            "rbac": "2020-04-01-preview"
        }
        //, "cluster": {
        //     "workspaceId": "[resourceId(parameters('workspaceResourceGroup'), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
        //     "acrId": "[resourceId(parameters('acrResourceGroupName'), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
        // }
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersion').aks]",
            "type": "Microsoft.ContainerService/managedClusters",
            "name": "[parameters('aksName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "nodeResourceGroup": "[concat(parameters('aksName'), '-nodepools')]",
                "kubernetesVersion": "[parameters('aksKubernetesVersion')]",
                "enableRBAC": true,
                "dnsPrefix": "[parameters('aksName')]",
                "addonProfiles": {
                    "kubeDashboard": {
                        "enabled": false
                    },
                    // "omsagent": {
                    //     "enabled": true,
                    //     "config": {
                    //         "logAnalyticsWorkspaceResourceID": "[variables('cluster').workspaceId]"
                    //     }
                    // },
                    "azurepolicy": {
                        "enabled": "[parameters('aksPolicy')]",
                        "config": {
                            "version": "v2"
                        }
                    }
                },
                "copy": [
                    {
                        "name": "agentPoolProfiles",
                        "count": "[length(parameters('aksAgentPoolProfiles'))]",
                        "input": {
                            "name": "[if(equals(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].osType, 'Linux'), if(lessOrEquals(length(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].name), 12), parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].name, substring(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].name, 0, 12)), if(lessOrEquals(length(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].name), 6), parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].name, substring(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].name, 0, 6)))]",
                            "orchestratorVersion": "[parameters('aksKubernetesVersion')]",
                            "maxPods": 250,
                            "osDiskSizeGB": 128,
                            "count": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeCount]",
                            "vmSize": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeVmSize]",
                            "osType": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].osType]",
                            "vnetSubnetID": "[concat(resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/', parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].subnetName)]",
                            "enableAutoScaling": "[if(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, json('null'))]",
                            "maxCount": "[if(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].maxCount, json('null'))]",
                            "minCount": "[if(parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].minCount, json('null'))]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].availabilityZones]",
                            "mode": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].mode]",
                            "enableNodePublicIP": false,
                            "nodeLabels": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeLabels]",
                            "nodeTaints": "[parameters('aksAgentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeTaints]"
                        }
                    }
                ],
                "networkProfile": "[parameters('networkProfile')]",
                "aadProfile": {
                    "managed": true,
                    "adminGroupObjectIDs": "[parameters('aksAADAdminGroups')]"
                },
                "apiServerAccessProfile": {
                    "authorizedIPRanges": "[if(parameters('privateCluster'), json('[]'), parameters('ipWhitelist'))]",
                    "enablePrivateCluster": "[parameters('privateCluster')]"
                }
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "sku": {
                "name": "Basic",
                "tier": "[parameters('aksUptimeSLA')]"
            }
        }
    ],
    "outputs": {
        "name": {
            "type": "string",
            "value": "[parameters('aksName')]"
        },
        "principalId": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('aksName')),variables('apiVersion').aks, 'Full').identity.principalId]"
        },
        "resourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.ContainerService/managedClusters/' ,parameters('aksName'))]"
        }
    }
}